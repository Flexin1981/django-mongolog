{
  "name": "Django-mongolog",
  "tagline": "A Simple Mongo Based Logger for Django",
  "body": "MongoLog\r\n========\r\n\r\nMongoLog is a simple Mongo based log handler that can be easly used with\r\nstandard python/django logging.\r\n\r\nPlease visit the [MongoLog Users\r\nGroup](https://groups.google.com/forum/#!forum/mongolog-users) with any\r\nquestions/suggestions. Thanks.\r\n\r\nQuick start\r\n-----------\r\n\r\n1.  Add \"mongolog\" to your INSTALLED\\_APPS like this\r\n    :   \r\n\r\n        INSTALLED_APPS = (\r\n            ...\r\n            'mongolog',\r\n        )\r\n        \r\n\r\n2.  Add the SimpleMongoLogHandler to your LOGGING config.\r\n    :   \r\n\r\n        LOGGING = {\r\n            'version': 1,\r\n            'handlers': {\r\n                'mongolog': {\r\n                    'level': 'DEBUG',\r\n                    'class': 'mongolog.SimpleMongoLogHandler',\r\n                    'connection': 'mongodb://localhost:27017'\r\n                },\r\n            },\r\n            'loggers': {\r\n                '': {\r\n                    'handlers': ['mongolog'],\r\n                    'level': 'DEBUG',\r\n                    'propagate': True\r\n                },\r\n            },\r\n        }\r\n        \r\n\r\n3)  Start your management shell:\r\n\r\n        ./manage.py shell\r\n\r\n4)  Create a couple of log entries\r\n    :  \r\n\r\n        import logging\r\n        import pymongo\r\n        logger = logging.getLogger(__name__)\r\n        \r\n\r\n        One of the cool things about mongolog is that it can log complex\r\n        data structures in a way that makes them both human parsable and\r\n        queryable. So for instance if we create the following log\r\n        message:\r\n\r\n        \r\n        # Pro Tip: You can copy and paste all of this\r\n\r\n        LOG_MSG = {\r\n            'test': True,  \r\n            'test class': 'TestBaseMongoLogHandler',\r\n            'Life': {\r\n                'Domain': {\r\n                    'Bacteria': [\r\n                        {\r\n                            'name': ValueError,  # intentional bad value\r\n                            'description': 'Just a bad description'\r\n                        }\r\n                    ],\r\n                    'Archaea': [],\r\n                    'Eukaryota': [\r\n                        {\r\n                            'name': 'Excavata', \r\n                            'description': 'Various flagellate protozoa',\r\n                        },\r\n                        {   \r\n                            'name': 'Amoebozoa',\r\n                            'descritpion': 'most lobose amoeboids and slime moulds',\r\n                        },\r\n                        {\r\n                            'name': 'Opisthokonta',\r\n                            'description': 'animals, fungi, choanoflagellates, etc.',\r\n                        },\r\n                    ]\r\n                } \r\n            }\r\n        }\r\n        \r\n\r\n        Now let's log our message at each of the defined log levels...\r\n\r\n        \r\n        logger.debug(LOG_MSG)\r\n        logger.info(LOG_MSG)\r\n        logger.warn(LOG_MSG)\r\n        logger.error(LOG_MSG)\r\n        try:\r\n            raise ValueError(\"Bad Value\")\r\n        except ValueError as e:\r\n            logger.exception(LOG_MSG)\r\n            raise\r\n       \r\n\r\n5)  Now log into your mongo shell and look at some results\r\n    :  \r\n\r\n        ./mongo\r\n\r\n        use mongolog\r\n        db.mongolog.findOne({'level': \"INFO\"})\r\n        \r\n\r\n        Will produde a mongo document like:\r\n\r\n        \r\n        {\r\n            \"_id\" : ObjectId(\"5664a22bdd162ca58f0693d2\"),\r\n            \"name\" : \"__builtin__\",\r\n            \"thread\" : NumberLong(\"140735229362944\"),\r\n            \"level\" : \"INFO\",\r\n            \"process\" : 42383,\r\n            \"module\" : \"<console>\",\r\n            \"filename\" : \"<console>\",\r\n            \"func\" : \"<module>\",\r\n            \"time\" : ISODate(\"2015-12-06T21:01:31.258Z\"),\r\n            \"msg\" : {\r\n                \"test\" : true,\r\n                \"Life\" : {\r\n                    \"Domain\" : {\r\n                        \"Eukaryota\" : [\r\n                            {\r\n                                \"name\" : \"Excavata\",\r\n                                \"description\" : \"Various flagellate protozoa\"\r\n                            },\r\n                            {\r\n                                \"name\" : \"Amoebozoa\",\r\n                                \"descritpion\" : \"most lobose amoeboids and slime moulds\"\r\n                            },\r\n                            {\r\n                                \"name\" : \"Opisthokonta\",\r\n                                \"description\" : \"animals, fungi, choanoflagellates, etc.\"\r\n                            }\r\n                        ],\r\n                        \"Archaea\" : [ ],\r\n                        \"Bacteria\" : [\r\n                            {\r\n                                \"name\" : \"<type 'exceptions.ValueError'>\",\r\n                                \"description\" : \"Just a bad description\"\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                \"test class\" : \"TestBaseMongoLogHandler\"\r\n            },\r\n            \"path\" : \"<console>\",\r\n            \"line\" : 1\r\n        }\r\n        \r\n\r\n        Take a look at the \"msg\" section and you will notice that all of\r\n        the information from our LOG\\_MSG is contained under that key in\r\n        standard mongo data structures. This means that we can query\r\n        based on our log message. For example in your mongo shell try\r\n        the following queries:\r\n\r\n \r\n        // Find all documents logged with a 'test' key\r\n        > db.mongolog.find({'msg.test': {$exists: true}}).count()\r\n        5\r\n\r\n        // Find all documents that have a Eukaryota name in the list of  [\"Amoebozoa\", \"Opisthokonta\"]\r\n        > db.mongolog.find({'msg.Life.Domain.Eukaryota.name': {$in: [\"Amoebozoa\", \"Opisthokonta\"]}}).count()\r\n        1\r\n\r\n        // Same as above but only those documents logged at level INFO\r\n        >db.mongolog.find({\r\n            'level': 'INFO',\r\n            'msg.Life.Domain.Eukaryota.name': {$in: [\"Amoebozoa\", \"Opisthokonta\"]}, \r\n        }).count()\r\n        1\r\n\r\n        // And again at level ERROR.  \r\n        >db.mongolog.find({\r\n            'level': 'INFO',\r\n            'msg.Life.Domain.Eukaryota.name': {$in: [\"Amoebozoa\", \"Opisthokonta\"]}, \r\n        }).count()\r\n        2\r\n\r\n        // Notice that now two records are returned.  This is because\r\n        // logger.exception(...) also logs at level ERROR, but also notice that if when we\r\n        // pretty print the records...\r\n        >db.mongolog.find({\r\n            'level': 'ERROR',\r\n            'msg.Life.Domain.Eukaryota.name': {$in: [\"Amoebozoa\", \"Opisthokonta\"]}, \r\n        }).pretty()\r\n\r\n        // ...that one of the entries has exception info.  When running in a real environment\r\n        // and not the console the 'trace' section will be populated with the full stack trace.\r\n        \"exception\" : {\r\n            \"info\" : [\r\n                \"<type 'exceptions.ValueError'>\",\r\n                \"Bad Value\",\r\n                \"<traceback object at 0x106853b90>\"\r\n            ],\r\n            \"trace\" :\r\n             null\r\n        }\r\n        \r\n\r\nFuture Roadmap\r\n--------------\r\n\r\nCurrently mongolog has pretty solid support for logging arbitrary\r\ndatastructures. If it finds an object it doesn't know how to natively\r\nserialize it will try to convert it to str().\r\n\r\nThe next steps are to create a set of most used query operations for\r\nprobing the log.\r\n\r\nPlease give a shout out with\r\n[feedback](https://groups.google.com/forum/#!forum/mongolog-users) and\r\nfeature requests.\r\n\r\nThanks",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}